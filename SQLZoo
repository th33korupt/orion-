CREATE A VIEW NAMED "MOST_ABS" FOR THE STUDENTS WITH THE GREATEST NUMBER OF ABSENCES 

CREATE VIEW "MOST_ABS" AS;
SELECT id, name, ABSENCES
FROM STUDENTS
ORDER BY ABSENCES DESC 
LIMIT 10;

# SELEC THE FIRST 10 RECORDS FROM WEBSITE LOGINS 
SELECT * FROM USERS 
LIMIT 10 

# CREATE TABLE "USERS" TO STORE LOGINS AND PASSWORDS 
CREATE TABLE USERS(
    ID INT NOT NULL 
    AUTO_INCREMENT
    LOGIN VARCHAR(100)
    PASSWORD VARCHAR(100) 
)

#SELECT ALL STUDENTS UNDER 21 , SORTED BY NAME 
SELECT * FROM STUDENTS 
WHERE AGE < 21 
ORDER BY NAME

#PRINTLIST OF FIRST ONE HUNRED CUSTOMERS WHO HAVE BALANCES GREATER THAN $1000 OR WHO ARE FROM NY 
SELECT * FROM CUSTOMERS 
WHERE BALANCE > 1000
OR CITY = 'NY'
LIMIT 100 

#NEED ALL AGES OF BEARS AND LIONS. THERE IS ONE QUERY FROM ZOO 1 (AGES) AND  ONE WITH LIONS AND CROCS FROM ZOO 2
SELECT AGE FROM ZOO1
WHERE ANIMAL IN ('BEAR', 'BIRD')
UNION
WHERE ANIMAL IN ('LION', 'CROCODILE')
SELECT AGE FROM ZOO2 

#CREATE LIST OF CUSTOMERS IN THE FORM "NAME IS FROM CITY" 
SELECT 
CONCAT (NAME, 'IS FROM', CITY)
FROM CUSTOMERS 

#LIST OF ANIMALS WHOSE AGE IS GREATER THWAN THE AVG AGE OF ALL OF THE ANIMALS 
SELECT * FROM ZOO 
WHERE AGE > 
(SELECT AVG(AGE) 
FROM ZOO)

#MANY DIFFERENT WOLVES IN THE ZOO = BLACK, WHITE, LUCKKY. LITTLE. PRINT AGES OF ALL THE WOLVES 
SELECT AGE FROM ZOO
WHERE ANIMAL LIKE '%WOLF'

#UPDATE THE "PEOPLE" TABLE 
UPDATE PEOPLE
SET NAME='JORDAN'
WHERE id=147;

#RETREIVE ALL STUDENTS BETWEEN THE AGES OF 18 AND 22
SELECT NAME FROM STUDENTS 
WHERE AGE 
BETWEEN 18 AND 22

#UPDATE "STUDENTS" TABLE TO SET JAKE UNIVERSITY TO MIT. HIS IS IS 682
UPDATE students 
SET university= 'MIT'
WHERE id =682

#UPDATE ZOO RECORDS TO INCLUDE ELEPHANTS AGE 
UPDATE ZOO
SET age= 14
WHERE animal= 'elephant'

#UPDATE food_balance TO 23 FOR ANIMALS WHO AGE IS GREATER THAN AVERAGE AGE OF ANIMALS 
UPDATE zoo 
SET food_balance=23 
WHERE age >
(SELECT AVG(age))
FROM zoo);

#NEED CUSTOMER NAMES ALONG WITH NAMES OF CITIES WHERE THEY LIVE. CITIES ARE STORED IN TABLE "cities"
SELECT customers.name, cities.name 
FROM customers 
RIGHT OUTER JOIN cities 
ON cities.id=customers.city_id;

#ADD LAST NAMES TO UNIVERSITY DATABASE 
ALTER TABLE students 
ADD last_name VARCHAR(100);

#RETRIEVE FROM MIT, STANFORD, AND HARVARD ALL STUDENTS WITH FIRST NAME = JAKE 
SELECT name FROM students 
WHERE university 
IN ('MIT', 'Stanford', 'Harvard')
AND name = "Jake";

select case 
when null = null then 'Yup' 
else 'Nope' end as Result;
